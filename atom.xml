<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kk&#39;s Battlegrounds</title>
  
  <subtitle>Talk is cheap,</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kiriku.github.io/"/>
  <updated>2017-11-21T22:35:22.910Z</updated>
  <id>https://kiriku.github.io/</id>
  
  <author>
    <name>Kk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java List基本概念</title>
    <link href="https://kiriku.github.io/2017/11/22/java-collection/"/>
    <id>https://kiriku.github.io/2017/11/22/java-collection/</id>
    <published>2017-11-21T20:52:02.000Z</published>
    <updated>2017-11-21T22:35:22.910Z</updated>
    
    <content type="html"><![CDATA[<p><img src="\myImages\java_list\java_collection.png" alt="java_collection"></p><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul><li>一个元素有序的、可重复、可以为<code>null</code>的集合</li><li><code>list</code>接口实现的类在实现插入元素时，都会根据索引进行排序</li><li><code>list.sublist</code>返回的是原始引用</li></ul><a id="more"></a><h3 id="AbstractCollection"><a href="#AbstractCollection" class="headerlink" title="AbstractCollection"></a>AbstractCollection</h3><ul><li>没有实现<code>boolean add(E)</code></li><li><code>boolean addAll(Collection c)</code> 通过<code>iterator + add()</code></li><li><code>boolean clear()</code>通过<code>iterator + remove()</code></li><li><code>boolean contains(object)</code> 通过<code>iterator</code> + <code>object.equals</code></li><li><code>boolean containsAll()</code> 通过<code>iterator + contains(o)</code>, 时间复杂度为<code>O(n^2)</code></li><li><code>boolean isEmpty()</code> 通过子类<code>size()</code></li><li><code>boolean remove(o)</code> 通过子类<code>iterator.remove</code>实现</li><li><code>boolean removeAll(collection)</code> 通过<code>iterator.remove(o) + contains(o)</code></li><li><code>boolean retainAll(collection)</code> 通过<code>iterator.remove(o) + contains(o)</code></li><li><code>boolean toArray()</code> 通过转换成<code>arrayList</code>调用<code>toArray()</code></li><li><code>boolean toString()</code> 通过<code>StringBuffer</code>输出<code>object</code>的地址</li></ul><h3 id="AbstractList"><a href="#AbstractList" class="headerlink" title="AbstractList"></a>AbstractList</h3><ul><li>是第一个实现随机访问方法的集合类，但不支持添加和替换。</li><li>默认不支持的 <code>add()</code>, <code>set()</code>,<code>remove()</code>; <code>throw new UnsupportedOperationException()</code></li><li><code>indexOf(Object)</code>首次出现，通过<code>ListIterator</code>向后遍历</li><li><code>lastIndexOf(Object)</code>通过<code>ListIterator</code>向前遍历</li><li><code>class SubList</code>主要调用父类<code>list</code>的方法在父类中进行操作。</li><li>创建内部迭代器<code>itr</code>和<code>ListItr</code></li><li><p>实现两个内部子类 <code>SubList</code> 和 <code>RandomAccessSublist</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">abstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">   <span class="comment">//构造参数:</span></span><br><span class="line">   <span class="comment">//list ：父 List</span></span><br><span class="line">   <span class="comment">//fromIndex : 从父 List 中开始的位置</span></span><br><span class="line">   <span class="comment">//toIndex : 在父 List 中哪里结束S</span></span><br><span class="line">   SubList(AbstractList&lt;E&gt; list, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex) &#123;</span><br><span class="line">       <span class="comment">//省略边界检查</span></span><br><span class="line">       l = list;</span><br><span class="line">       offset = fromIndex;</span><br><span class="line">       size = toIndex   fromIndex;</span><br><span class="line">       <span class="comment">//和父类使用同一个 modCount</span></span><br><span class="line">       <span class="keyword">this</span>.modCount = l.modCount;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomAccessSubList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">SubList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">RandomAccess</span> </span>&#123;</span><br><span class="line">   RandomAccessSubList(AbstractList&lt;E&gt; list, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex) &#123;</span><br><span class="line">       <span class="keyword">super</span>(list, fromIndex, toIndex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> RandomAccessSubList&lt;&gt;(<span class="keyword">this</span>, fromIndex, toIndex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ul><li>频繁的读<code>size()</code>, <code>isEmpty()</code>, <code>get()</code>, <code>set()</code>, <code>iterator()</code>, <code>ListIterator()</code> 时间复杂度为<code>O(1)</code></li><li><code>private static final int DEFAULT_CAPACITY = 10;</code></li><li><code>transient Object[] elementData</code>, <code>transient</code>表示无法序列化</li><li><code>MAX_ARRAY_SIZE = Integer.MAX_VALUE   8;</code></li><li>继承<code>RandomAccess</code>,<code>get</code>的效率大于迭代器</li><li>多线程不安全，可以使用<code>List list = Collection.synchronizedList(new ArratList(...))</code>加锁</li><li><code>ArrayList()</code> 默认返回空数组</li><li><code>ArrayList(initialCapacity)</code> 返回指定容量，为空则返回空数组</li><li><p><code>ArrayList(Collection)</code> 调用<code>toArray()</code>创建数组，失败后通过<code>Arrays.copyOf()</code>,为空则返回空数组</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;   插入队尾</span><br><span class="line">   <span class="comment">//对数组的容量进行调整</span></span><br><span class="line">   ensureCapacityInternal(size + <span class="number">1</span>);</span><br><span class="line">   elementData[size++];</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(indx, elem)</span> </span>&#123;</span><br><span class="line">   rangeCheck(indx);</span><br><span class="line">   ensureCapacityInternal(size + <span class="number">1</span>);</span><br><span class="line">   System.arraycopy(elementData, indx, elementData, indx + <span class="number">1</span>, size   indx);</span><br><span class="line">   elementData[indx] = elem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection c)</span> </span>&#123;</span><br><span class="line">   object[] a = c.toArray();</span><br><span class="line">   <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">   ensureCapacityInternal(size + numNew);</span><br><span class="line">   size += numNew;</span><br><span class="line">   <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ensureCapacityInternal(minCapacity) &#123;</span><br><span class="line"> modCount++;</span><br><span class="line"> <span class="keyword">if</span> (minCapacity   elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">     grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">grow(<span class="keyword">int</span>) &#123;</span><br><span class="line"> <span class="keyword">int</span> oldCap = elementData.length;</span><br><span class="line"> <span class="keyword">int</span> newCap = oldCap + (oldCap &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (newCap   minCapacity &lt; <span class="number">0</span>) newCap = minCapacity;</span><br><span class="line"> <span class="keyword">if</span> (newCap   MAX_ARRAY_SIZE &gt; <span class="number">0</span>) newCap = hugeCapcity(minCapacity);</span><br><span class="line"> elementData = Arrays.copyOf(elementData,newCap)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">   <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">       Integer.MAX_VALUE :</span><br><span class="line">       MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">batchRemove</span><span class="params">(collection, complement)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> r = <span class="number">0</span>, w = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="keyword">for</span> (; r &lt; size; r++) &#123;</span><br><span class="line">           <span class="comment">//根据complement决定是保留还是删除</span></span><br><span class="line">           <span class="keyword">if</span> (c.contains(elementData[r] == complement))</span><br><span class="line">               elementData[w++] = elementData[r];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (r != size) &#123;</span><br><span class="line">         System.arraycopy(elementData, r, elementData, w, size   r);</span><br><span class="line">         w += size   r;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (w != size) &#123;</span><br><span class="line">         <span class="comment">//clear to let GC do its work</span></span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = w; <span class="number">1</span> &lt; size; i++)</span><br><span class="line">             elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">         modCount += size   w;</span><br><span class="line">         size = w;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><code>int indexOf(o)</code>遍历找到的第一个相同元素，调用<code>o.equals(elementData[i])</code>,否则返回<code>-1</code></li><li><code>int lastIndexOf(o)</code>从尾部遍历找到的第一个相同元素，调用<code>o.equals(elementData[i])</code>,否则返回<code>-1</code></li><li><code>T[] toArray(T[] a)</code>调用<code>Arrays.copyOf(elementData, size,a.getClass());</code></li><li><code>iterator</code>、<code>ListIterator</code>通过数组下标实现</li></ul><h3 id="AbstractSequentialList"><a href="#AbstractSequentialList" class="headerlink" title="AbstractSequentialList"></a>AbstractSequentialList</h3><ul><li>只支持迭代器访问，将<code>ListIterator</code>相关方法实现</li></ul><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><ul><li>插入、删除频繁时使用 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">  <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, e, f);</span><br><span class="line">  first = newNode;</span><br><span class="line">  <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">      <span class="comment">//只有一个元素时，设置尾节点</span></span><br><span class="line">      last = newNode;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">      f.prev = newNode;</span><br><span class="line">  size++;</span><br><span class="line">  modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> <span class="comment">//类似linkFirst</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E object)</span> <span class="comment">//加在尾部</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(indx, E e)</span> <span class="comment">//找寻位置，插入节点</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//Queue</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> <span class="comment">//插入头部</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> <span class="comment">//插入尾部</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">offerFirst</span><span class="params">(E e)</span> <span class="comment">//插入头部</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">E <span class="title">pollLast</span><span class="params">()</span> <span class="comment">//弹出尾部</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">E <span class="title">pop</span><span class="params">()</span> <span class="comment">//弹出头</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//Dequeue</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">clear</span><span class="params">()</span> <span class="comment">//所有元素置为空</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">poll</span><span class="params">()</span> <span class="comment">//获取第一个同时删除</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">peek</span><span class="params">()</span> <span class="comment">//获取第一个不删除</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">class DescendingIterator implements Iterator&lt;E&gt;</span>&#123;&#125; <span class="comment">//倒叙迭代器</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><ul><li>底层由一个可以增长的数组组成</li><li><code>Vector</code> 通过 <code>capacity</code> (容量) 和 <code>capacityIncrement</code> (增长数量) 来尽量少的占用空间</li><li>扩容时默认扩大两倍</li><li>最好在插入大量元素前增加 <code>vector</code> 容量，那样可以减少重新申请内存的次数</li><li>通过 <code>iterator</code> 和 <code>lastIterator</code> 获得的迭代器是 <code>fail-fast</code> 的</li><li>通过 <code>elements</code> 获得的老版迭代器 <code>Enumeration</code> 不是 <code>fail-fast</code> 的</li><li>同步类，每个方法前都有同步锁 <code>synchronized</code></li><li>在 JDK 2.0 以后，经过优化，<code>Vector</code> 也加入了 Java 集合框架大家族</li></ul><h3 id="Vector-VS-ArrayList"><a href="#Vector-VS-ArrayList" class="headerlink" title="Vector VS ArrayList"></a>Vector VS ArrayList</h3><ul><li>共同点：<ul><li>都是基于数组</li><li>都支持随机访问</li><li>默认容量都是 <code>10</code></li><li>都有扩容机制</li></ul></li><li>区别：<ul><li><code>Vector</code> 出生的比较早，JDK 1.0 就出生了，<code>ArrayList</code> JDK 1.2 才出来</li><li><code>Vector</code> 比 <code>ArrayList</code> 多一种迭代器 <code>Enumeration</code></li><li><code>Vector</code> 是线程安全的，<code>ArrayList</code> 不是</li><li><code>Vector</code> 默认扩容<code>2</code>倍，<code>ArrayList</code>是<code>1.5</code>倍</li><li>如果没有线程安全的需求，一般推荐使用 <code>ArrayList</code>，而不是 <code>Vector</code>，因为每次都要获取锁，效率太低。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;\myImages\java_list\java_collection.png&quot; alt=&quot;java_collection&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;List&quot;&gt;&lt;a href=&quot;#List&quot; class=&quot;headerlink&quot; title=&quot;List&quot;&gt;&lt;/a&gt;List&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一个元素有序的、可重复、可以为&lt;code&gt;null&lt;/code&gt;的集合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt;接口实现的类在实现插入元素时，都会根据索引进行排序&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list.sublist&lt;/code&gt;返回的是原始引用&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java源码" scheme="https://kiriku.github.io/categories/Java%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Java集合" scheme="https://kiriku.github.io/tags/Java%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>PUBG倍镜2倍，4倍，8倍镜快速测距</title>
    <link href="https://kiriku.github.io/2017/11/21/PUBG_Ranging/"/>
    <id>https://kiriku.github.io/2017/11/21/PUBG_Ranging/</id>
    <published>2017-11-20T23:22:01.000Z</published>
    <updated>2017-11-21T22:26:29.517Z</updated>
    
    <content type="html"><![CDATA[<p>对于倍镜的使用大多数人都是通过试射然后调整下次射击位置来实现。<br>对于远距离的对手，需要将敌人一击击倒的场合时，并不十分实用，而另一种方法：</p><p><code>测距 -&gt; 归零 -&gt; 瞄准 -&gt; 射击</code></p><p>为我们提供了一种一击毙敌并且行之有效的方法。<br><a id="more"></a></p><h5 id="两倍镜"><a href="#两倍镜" class="headerlink" title="两倍镜:"></a>两倍镜:</h5><p><img src="/myImages/PUBG_Ranging/2x_100.PNG" alt="2x_100"></p><hr><p><img src="/myImages/PUBG_Ranging/2x_200.PNG" alt="2x_200"></p><hr><p><img src="/myImages/PUBG_Ranging/2x_300.PNG" alt="2x_300"></p><hr><h5 id="四倍镜"><a href="#四倍镜" class="headerlink" title="四倍镜:"></a>四倍镜:</h5><p><img src="/myImages/PUBG_Ranging/4x_100.PNG" alt="4x_100"></p><hr><p><img src="/myImages/PUBG_Ranging/4x_200.PNG" alt="4x_200"></p><hr><p><img src="/myImages/PUBG_Ranging/4x_300.PNG" alt="4x_300"></p><hr><p><img src="/myImages/PUBG_Ranging/4x_400.PNG" alt="4x_400"></p><hr><p><img src="/myImages/PUBG_Ranging/4x_500.PNG" alt="4x_500"></p><hr><p><img src="/myImages/PUBG_Ranging/4x_600.PNG" alt="4x_600"></p><hr><h5 id="八倍镜"><a href="#八倍镜" class="headerlink" title="八倍镜:"></a>八倍镜:</h5><p><img src="/myImages/PUBG_Ranging/8x_100.PNG" alt="8x_100"></p><hr><p><img src="/myImages/PUBG_Ranging/8x_200.PNG" alt="8x_200"></p><hr><p><img src="/myImages/PUBG_Ranging/8x_300.PNG" alt="8x_300"></p><hr><p><img src="/myImages/PUBG_Ranging/8x_400.PNG" alt="8x_400"></p><hr><p><img src="/myImages/PUBG_Ranging/8x_500.PNG" alt="8x_500"></p><hr><p><img src="/myImages/PUBG_Ranging/8x_600.PNG" alt="8x_600"></p><p>参考资料：<br>绝地求生苦大师教学系列：<br><a href="https://www.bilibili.com/video/av14794122/" target="_blank" rel="noopener">https://www.bilibili.com/video/av14794122/</a><br><a href="https://www.bilibili.com/video/av14828854/" target="_blank" rel="noopener">https://www.bilibili.com/video/av14828854/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于倍镜的使用大多数人都是通过试射然后调整下次射击位置来实现。&lt;br&gt;对于远距离的对手，需要将敌人一击击倒的场合时，并不十分实用，而另一种方法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;测距 -&amp;gt; 归零 -&amp;gt; 瞄准 -&amp;gt; 射击&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;为我们提供了一种一击毙敌并且行之有效的方法。&lt;br&gt;
    
    </summary>
    
      <category term="Games" scheme="https://kiriku.github.io/categories/Games/"/>
    
    
      <category term="PUBG" scheme="https://kiriku.github.io/tags/PUBG/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://kiriku.github.io/2017/11/21/Hexo_Hallo_World/"/>
    <id>https://kiriku.github.io/2017/11/21/Hexo_Hallo_World/</id>
    <published>2017-11-20T22:19:45.239Z</published>
    <updated>2017-11-21T19:41:23.199Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="Tech" scheme="https://kiriku.github.io/categories/Tech/"/>
    
    
      <category term="hexo" scheme="https://kiriku.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
